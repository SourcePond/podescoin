#set($h1 = '#')
#set($h2 = '##')
#set($h3 = '###')
#set($h4 = '####')

$h1 Quick Overview
PodesCoin is an OSGi component which aims to inject [Blueprint](https://www.ibm.com/developerworks/library/os-osgiblueprint/) components into objects being serialized and/or deserialized. Usually, you would need some static method or field if access to other components is required during serialiation or deserialization of an object. With PodesCoin, this is not necessary anymore: to specify injection-points in your serializable class, you can use the API annotations [Component](https://sourcepond.ch/${project.groupId}/${project.artifactId}-api/${project.version}/apidocs/ch/sourcepond/utils/podescoin/api/Component.html), [ReadObject](https://sourcepond.ch/${project.groupId}/${project.artifactId}-api/${project.version}/apidocs/ch/sourcepond/utils/podescoin/api/ReadObject.html) and [WriteObject](https://sourcepond.ch/${project.groupId}/${project.artifactId}-api/${project.version}/apidocs/ch/sourcepond/utils/podescoin/api/WriteObject.html).

PodesCoin allows you to work with injectable components in conjunction with your serializable classes without having a tight coupling between them. To achieve this, PodesCoin installs an [OSGi Weaving Hook](https://osgi.org/javadoc/r4v43/core/org/osgi/framework/hooks/weaving/WeavingHook.html) which creates (or enhances an existing) readObject and/or writeObject method for injecting components from a Blueprint container into the object, see [JavaDoc of Serializable](http://docs.oracle.com/javase/8/docs/api/java/io/Serializable.html) for further information about readObject and writeObject.

$h2 Dependencies
PodesCoin bundles are available from Maven Central. If you want to use PodesCoin in your own project, you need to add following dependency to the POM:

```
<dependency>
    <groupId>ch.sourcepond.utils</groupId>
    <artifactId>podescoin-api</artifactId>
    <version>${project.version}</version>
</dependency>
```

To work with PodesCoin, it's necessary that following bundle is installed in your OSGi environment.

```
<dependency>
	<!-- Only needed on runtime <scope>runtime</scope> -->
    <groupId>ch.sourcepond.utils</groupId>
    <artifactId>podescoin-core</artifactId>
    <version>${project.version}</version>
</dependency>
```


Alternatively, there is also a [Karaf](http://karaf.apache.org/) feature available:

```
<dependency>
    <groupId>ch.sourcepond.utils</groupId>
    <artifactId>podescoin-feature</artifactId>
    <version>${project.version}</version>
</dependency>
```

Usually you want to test your serializable classes. Add following dependency to your test scope to get testing support for PodesCoin:

```
<dependency>
	<scope>test</scope>
    <groupId>ch.sourcepond.utils</groupId>
    <artifactId>podescoin-testing</artifactId>
    <version>${project.version}</version>
</dependency>
```

$h2 Usage
As mentioned, the usage of PodesCoin requires an OSGi Blueprint extender available. If the bundle which contains your serializable class is not Blueprint enabled, the injection mechanism will *not* work for this bundle. Components are always looked up in the Blueprint container which manages the bundle of your serializable class. 
The enhancer will recognize any class which contains a field or method which is marked with a PodesCoin annotation. If a class has been enhanced which is not serializable, an exception will be logged by the OSGi framework; this has only informative character and won't disturb any further processing.

You have two possibilities to inject Blueprint components into your serializable class: field injection and/or an injector method. You can use both mechanisms at the same time in the same class.

$h3 Field injection
Fields will always be injected **before** an injector method is being executed.

```
import ch.sourcepond.foo.BarService;
import ch.sourcepond.utils.podescoin.api.Component;
import java.io.Serializable;

public class Foo implements Serializable {

	private static final long serialVersionUID = 1L;

	@Component
	private transient BarService bar;
}
```

The example above assumes that exactly one service of type "ch.sourcepond.foo.BarService" is available in the bundles Blueprint container. If not, the deserialization process will be cancelled by throwing an exception. You can provide an component-id to bind a field to a uniquely named component as shown in the example below:

**Note:** A field will only be considered by PodesCoin to be injectable when it's declared **transient** and **non-final**.

```
import ch.sourcepond.foo.BarService;
import ch.sourcepond.utils.podescoin.api.Component;
import java.io.Serializable;

public class Foo implements Serializable {

	private static final long serialVersionUID = 1L;

	@Component("myComponent")
	private transient BarService bar;
}
```

In the example above, we bind component "myComponent" to the field. If no component with the name specified is registered with the Blueprint container, the deserialization process will be cancelled by throwing an exception.

$h3 Injector method

An injector method can have an arbitrary name, an arbitrary visibility, and, an arbitrary number of arguments. It's return type should be void because any returned value will be ignored.

An important fact is, that an injector method is *not* considered to be *virtual* `(INVOKEVIRTUAL)`. Suppose a class **B** which extends class **A**. **A** declares injector method **inject** which is overwritten by class **B**. If PodesCoin calls it on an instance of **B** within the de-serialization context of its super-type **A**, only the instance method on **A** will be executed `(INVOKESPECIAL)`. The instance method on **B** will be *ignored*. This behavior corresponds to the common rules of *readObject* which must be private, and, thus, is called as instance method. See [Java Byte Code Listings](https://en.wikipedia.org/wiki/Java_bytecode_instruction_listings) for further information about INVOKEVIRTUAL and INVOKESPECIAL. Furthermore, do *not* declare a super call in your injection method like super.inject`(...)` in case of class **B**. This will result in PodesCoin failing to enhance the class.  

$h4 @ReadObject

If you need the ObjectInputStream passed to readObject, then you must declare an ObjectInputStream parameter as first argument of your injector method. Following examples show how to use dependency injection for deserialization.

```
import ch.sourcepond.foo.BarService;
import ch.sourcepond.foo.FoobarService;
import ch.sourcepond.utils.podescoin.api.ReadObject;
import java.io.Serializable;

public class Foo implements Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	@ReadObject
	public void inject(BarService b, FoobarService d) {
		// Do awesome stuff here 
	}
}
```

The example above assumes that exactly one instance of each service with type "ch.sourcepond.foo.BarService" and "ch.sourcepond.foo.FoobarService" is available in the bundles Blueprint container. If not, the deserialization process will be cancelled by throwing an exception. You can use "ch.sourcepond.utils.podescoin.api.Component" to bind a parameter to a uniquely named component as shown in the example below:

```
import ch.sourcepond.foo.BarService;
import ch.sourcepond.foo.FoobarService;
import ch.sourcepond.utils.podescoin.api.Component;
import ch.sourcepond.utils.podescoin.api.ReadObject;
import java.io.Serializable;

public class Foo implements Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	@ReadObject
	public void inject(@Component("bar") BarService b, @Component("foobar") FoobarService d) {
		// Do awesome stuff here 
	}
}
```

In the example above, we bind component "bar" to the first parameter and component "foobar" to the second one. If any component with the name specified could not be found in the Blueprint container, the deserialization process will be cancelled by throwing an exception.

```
import ch.sourcepond.foo.BarService;
import ch.sourcepond.foo.FoobarService;
import ch.sourcepond.utils.podescoin.api.Component;
import ch.sourcepond.utils.podescoin.api.ReadObject;
import java.io.ObjectInputStream;

public class Foo implements Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	@ReadObject
	public void inject(ObjectInputStream in, BarService b, FoobarService d) {
		// Do awesome stuff here 
	}
}
```

The code above is almost the same as in the first example, but, with a crucial difference: the first parameter is the ObjectInputStream taken as argument by the readObject method. If you need the ObjectInputStream, for instance for extracting parameter values which are necessary for calling methods on your injected components, then you can do so by declaring an ObjectInputStream parameter as first argument of your injection method. Of course, the same applies if the component parameters are named:

```
import ch.sourcepond.foo.BarService;
import ch.sourcepond.foo.FoobarService;
import ch.sourcepond.utils.podescoin.api.Component;
import ch.sourcepond.utils.podescoin.api.ReadObject;
import java.io.ObjectInputStream;
import java.io.Serializable;

public class Foo implements Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	@ReadObject
	public void inject(ObjectInputStream in, @Component("bar") BarService b, @Component("foobar") FoobarService d) {
		// Do awesome stuff here 
	}
}
```

$h4 @WriteObject

Working with a writer injector method is like the using reader injector method described above. If you need the ObjectOutputStream passed to writeObject, then you must declare an ObjectOutputStream parameter as first argument of your injector method. Following examples show how to use dependency injection for serialization.

```
import ch.sourcepond.foo.BarService;
import ch.sourcepond.foo.FoobarService;
import ch.sourcepond.utils.podescoin.api.WriteObject;

public class Foo implements Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	@WriteObject
	public void inject(BarService b, FoobarService d) {
		// Do awesome stuff here 
	}
}
```

$h2 Initialization order
As mentioned in the introduction section, PodesCoin enhances an existing readObject and/or writeObject method (or generates it if not existing). Injectable fields will be initialized *before* the body of readObject/writeObject is executed. This insures, that your services are available when your serialization/deserialization logic is running. The same applies, if you declared an injector method; it will be executed *before* the body of readObject/writeObject. If you declared both, field injection *and* an injector method, then firstly the field injection will be applied before the injector method is executed.

The generated code of readObject calls ObjectInputStream:defaultReadObject() on the input stream passed if, and only if, the readObject method was newly generated. It won't be called if an existing readObject method has been enhanced; in this case, the developer of readObject is responsible to call ObjectInputStream:defaultReadObject() at the appropriate place if necessary. The same applies to a generated writeObject method; ObjectOutputStream:defaultWriteObject() on the object output stream passed to writeObject will only be called if the writeObject method was newly generated. 

Note: If you implemented writeObject without readObject along with an injector method (which is a usual case), insure that you call ObjectOutputStream:defaultWriteObject() at the very beginning of your writeObject method. This insures, that the right de-serialization order is kept because the generated (not enhanced) readObject method will call ObjectInputStream:defaultReadObject() at the beginning.

$h2 Testing
See the example [here](https://github.com/SourcePond/podescoin/blob/master/podescoin-testing/src/test/java/ch/sourcepond/utils/podescoin/testing/examples/BasketExample2Test.java) to get an idea how to test your serializable classes with PodesCoinTestingContext.

